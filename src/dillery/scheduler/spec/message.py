# @formatter:off
"""
This module was generated by asynchron application, see https://github.com/zerlok/asynchron

Config          docs/services/scheduler/asyncapi.yaml
Created at      2022-02-08T07:00:34
Author          zerlok

"""

import datetime
import pydantic
import typing
import uuid




class PostedTaskTaskInput(pydantic.BaseModel):
    body: bytes = pydantic.Field(
        alias="body",
        description="""An input data for task execution""",
    )


class PostedTaskInfoChannelsTaskPostedPublishMessagePayloadPropertiesInfoAllOf_1(pydantic.BaseModel):
    posted_at: typing.Optional[datetime.datetime] = pydantic.Field(
        alias="postedAt",
        description="""A time when task was posted""",
    )


class PostedTaskInfoTaskMeta(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class PostedTaskInfo(PostedTaskInfoTaskMeta, PostedTaskInfoChannelsTaskPostedPublishMessagePayloadPropertiesInfoAllOf_1):
    pass


class PostedTask(pydantic.BaseModel):
    info: typing.Optional[PostedTaskInfo] = pydantic.Field(
        alias="info",
    )
    input: typing.Optional[PostedTaskTaskInput] = pydantic.Field(
        alias="input",
    )


class AcceptedTaskInfoChannelsTaskAcceptedSubscribeMessagePayloadPropertiesInfoAllOf_1(pydantic.BaseModel):
    accepted_at: typing.Optional[datetime.datetime] = pydantic.Field(
        alias="acceptedAt",
        description="""A time when task was accepted""",
    )


class AcceptedTaskInfoTaskMeta(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class AcceptedTaskInfo(AcceptedTaskInfoTaskMeta, AcceptedTaskInfoChannelsTaskAcceptedSubscribeMessagePayloadPropertiesInfoAllOf_1):
    pass


class AcceptedTask(pydantic.BaseModel):
    info: typing.Optional[AcceptedTaskInfo] = pydantic.Field(
        alias="info",
    )


class CancelledTaskInfoChannelsTaskCancelledSubscribeMessagePayloadPropertiesInfoAllOf_1(pydantic.BaseModel):
    cancelled_at: typing.Optional[datetime.datetime] = pydantic.Field(
        alias="cancelledAt",
        description="""A time when task was cancelled""",
    )


class CancelledTaskInfoTaskMeta(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class CancelledTaskInfo(CancelledTaskInfoTaskMeta, CancelledTaskInfoChannelsTaskCancelledSubscribeMessagePayloadPropertiesInfoAllOf_1):
    pass


class CancelledTask(pydantic.BaseModel):
    info: typing.Optional[CancelledTaskInfo] = pydantic.Field(
        alias="info",
    )


class StartedTaskInfoChannelsTaskStartedPublishMessagePayloadPropertiesInfoAllOf_1(pydantic.BaseModel):
    started_at: typing.Optional[datetime.datetime] = pydantic.Field(
        alias="startedAt",
        description="""A time when task was started""",
    )


class StartedTaskInfoTaskMeta(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class StartedTaskInfo(StartedTaskInfoTaskMeta, StartedTaskInfoChannelsTaskStartedPublishMessagePayloadPropertiesInfoAllOf_1):
    pass


class StartedTask(pydantic.BaseModel):
    info: typing.Optional[StartedTaskInfo] = pydantic.Field(
        alias="info",
    )


class FinishedTaskTaskOutput(pydantic.BaseModel):
    body: bytes = pydantic.Field(
        alias="body",
        description="""The execution result of the task""",
    )


class FinishedTaskInfoChannelsTaskFinishedPublishMessagePayloadPropertiesInfoAllOf_1(pydantic.BaseModel):
    finished_at: typing.Optional[datetime.datetime] = pydantic.Field(
        alias="finishedAt",
        description="""A time when task was finished""",
    )


class FinishedTaskInfoTaskMeta(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class FinishedTaskInfo(FinishedTaskInfoTaskMeta, FinishedTaskInfoChannelsTaskFinishedPublishMessagePayloadPropertiesInfoAllOf_1):
    pass


class FinishedTask(pydantic.BaseModel):
    info: typing.Optional[FinishedTaskInfo] = pydantic.Field(
        alias="info",
    )
    output: typing.Optional[FinishedTaskTaskOutput] = pydantic.Field(
        alias="output",
    )


class FailedTaskTaskError(pydantic.BaseModel):
    reason_text: typing.Optional[str] = pydantic.Field(
        alias="reasonText",
        description="""The description why task execution was failed""",
    )


class FailedTaskInfoChannelsTaskFailedPublishMessagePayloadPropertiesInfoAllOf_1(pydantic.BaseModel):
    failed_at: typing.Optional[datetime.datetime] = pydantic.Field(
        alias="failedAt",
        description="""A time when task was failed""",
    )


class FailedTaskInfoTaskMeta(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class FailedTaskInfo(FailedTaskInfoTaskMeta, FailedTaskInfoChannelsTaskFailedPublishMessagePayloadPropertiesInfoAllOf_1):
    pass


class FailedTask(pydantic.BaseModel):
    error: typing.Optional[FailedTaskTaskError] = pydantic.Field(
        alias="error",
    )
    info: typing.Optional[FailedTaskInfo] = pydantic.Field(
        alias="info",
    )


class PerformedTaskInfo(pydantic.BaseModel):
    author_id: typing.Optional[str] = pydantic.Field(
        alias="authorId",
        description="""A unique identifier to an author who posted the task""",
    )
    group_id: typing.Optional[str] = pydantic.Field(
        alias="groupId",
        description="""A unique identifier of the group the task belongs to""",
    )
    task_id: uuid.UUID = pydantic.Field(
        alias="taskId",
        description="""A unique identifier of the task""",
    )


class PerformedTask(pydantic.BaseModel):
    info: typing.Optional[PerformedTaskInfo] = pydantic.Field(
        alias="info",
    )








# @formatter:on
